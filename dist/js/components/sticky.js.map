{"version":3,"sources":["sticky.js"],"names":["$","window","document","Sticky","element","settings","this","namespace","Name","Fm","createID","config","extend","fn","defaults","elem","$elem","$context","closest","context","calc","isStick","isBound","recalc","debounce","calculate","bind","$window","on","init","Defaults","mask","observe","topOffset","bottomOffset","scrollSpace","onStick","onUnStick","onBound","onUnBound","ClassNames","stick","bound","Selectors","windowHeight","height","prototype","length","console","warn","self","make","contextOffset","offset","contextHeight","outerHeight","elemOffset","elemSize","width","outerWidth","destroy","setBounds","requestAnimationFrame","update","conf","bounds","top","bottom","overSized","unbind","off","scrollTop","pageYOffset","elemBottom","state","fixed","css","position","addClass","call","unStick","clear","unBound","removeClass","apply","action","$mask","next","show","class","insertAfter","hide","remove","observer","MutationObserver","childList","subtree","contextObserver","setting","hasOwnProperty","disconnect","data","args","each","Array","isArray","jQuery"],"mappings":"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","file":"sticky.js","sourcesContent":["/**\n * Sticky plugin.\n *\n * @package Fundament\n */\n;(function($, window, document) {\n    'use strict';\n\n    var Name = 'sticky';\n\n    var Defaults = {\n        context      : null,\n        mask         : true,\n        observe      : false,\n        topOffset    : 0,\n        bottomOffset : 0,\n        scrollSpace  : 200,\n        onStick      : function() {},\n        onUnStick    : function() {},\n        onBound      : function() {},\n        onUnBound    : function() {}\n    };\n\n    var ClassNames = {\n        mask  : 'sticky-mask',\n        stick : 'stick',\n        bound : 'bound'\n    };\n\n    var Selectors = {\n        mask : '.sticky-mask'\n    };\n\n    // Globals\n\n    var $window = $(window);\n\n    var windowHeight = $window.height();\n\n    // Constructor\n\n    function Sticky(element, settings) {\n        this.namespace = '.' + Name + '.' + Fm.createID();\n        this.config    = $.extend({}, $.fn[Name].defaults, settings);\n        this.elem      = element;\n        this.$elem     = $(element);\n        this.$context  = this.$elem.closest(this.config.context);\n        this.calc      = {};\n        this.isStick   = false;\n        this.isBound   = false;\n        this.recalc    = Fm.debounce(this.calculate.bind(this), 200);\n\n        // initialize as soon as the document and\n        // its content have finished loading\n        $window.on('load', this.init.bind(this));\n    }\n\n    // Prototype\n\n    $.extend(Sticky.prototype, {\n\n        init: function() {\n            if ( ! this.$context.length) {\n                return console.warn('Undefined context element');\n            }\n\n            this.bind();\n            this.observe();\n            this.calculate();\n        },\n\n        /**\n         * Pre-calculate sizes and positions.\n         *\n         * Executed during initialization, while resizing and after mutation (optional).\n         */\n        calculate: function() {\n            var self = this,\n                calc = self.calc;\n\n            windowHeight = $window.height();\n\n            if (self.isStick) {\n                self.make('unStick');\n            }\n\n            calc.contextOffset = self.$context.offset();\n            calc.contextHeight = self.$context.outerHeight();\n            calc.elemOffset = self.$elem.offset();\n            calc.elemSize = {\n                width  : self.$elem.outerWidth(),\n                height : self.$elem.outerHeight()\n            };\n\n            if (calc.elemSize.height + self.config.scrollSpace >= calc.contextHeight) {\n                console.warn('Insufficient scrolling space available');\n                return this.destroy();\n            }\n\n            self.setBounds();\n\n            requestAnimationFrame(self.update.bind(self));\n        },\n\n        /**\n         * Set the sticky boundaries.\n         */\n        setBounds: function() {\n            var self = this,\n                calc = self.calc,\n                conf = self.config;\n\n            calc.bounds = {\n                top    : calc.elemOffset.top - conf.topOffset,\n                bottom : calc.contextOffset.top + calc.contextHeight - conf.bottomOffset\n            };\n\n            if (calc.elemSize.height > windowHeight) { // oversized content\n                calc.overSized = calc.elemSize.height - windowHeight + conf.bottomOffset;\n                calc.bounds.top += calc.overSized + conf.topOffset;\n                calc.bounds.bottom += conf.topOffset;\n            } else {\n                calc.overSized = 0;\n            }\n        },\n\n        /**\n         * Bind event handlers.\n         */\n        bind: function() {\n            var self = this;\n\n            $window\n                .on('resize' + self.namespace, self.recalc)\n                .on('scroll' + self.namespace, function() {\n                    requestAnimationFrame(self.update.bind(self));\n                });\n        },\n\n        /**\n         * Unbind event handlers.\n         */\n        unbind: function() {\n            $window\n                .off('resize' + this.namespace)\n                .off('scroll' + this.namespace);\n        },\n\n        /**\n         * Check if the sticky element's state needs to be changed.\n         */\n        update: function() {\n            var self = this,\n                calc = self.calc,\n                scrollTop = window.pageYOffset,\n                elemBottom = scrollTop\n                    + self.config.topOffset\n                    + calc.elemSize.height\n                    - calc.overSized;\n\n            if (\n                ! self.isStick                           // is not sticky\n                && scrollTop >= calc.bounds.top          // passed top boundary\n            ) {\n                self.make('stick');\n\n                if (elemBottom >= calc.bounds.bottom) {\n                    self.make('bound'); // fail-safe\n                }\n            }\n            else if (\n                self.isStick                             // is sticky\n                && scrollTop < calc.bounds.top           // didn't pass top boundary\n            ) {\n                self.make('unStick');\n            }\n            else if (\n                ! self.isBound                           // is not bound\n                && elemBottom >= calc.bounds.bottom      // passed bottom boundary\n            ) {\n                self.make('bound');\n            }\n            else if (\n                self.isBound                             // is bound\n                && elemBottom < calc.bounds.bottom       // didn't pass bottom boundary\n            ) {\n                self.make('unBound');\n            }\n        },\n\n        /**\n         * Set the state of the sticky element.\n         *\n         * @param {string} state\n         */\n        make: function(state) {\n            var self = this,\n                calc = self.calc;\n\n            return {\n                fixed: function() {\n                    self.$elem.css({\n                        position  : 'fixed',\n                        top       : calc.overSized ? -calc.overSized : self.config.topOffset, // oversized content has a negative top\n                        bottom    : '',\n                        width     : calc.elemSize.width\n                    });\n                    self.isStick = true;\n                },\n\n                stick: function() {\n                    self.make('fixed');\n                    self.mask('show');\n                    self.$elem.addClass(ClassNames.stick);\n                    self.config.onStick.call(self.elem);\n                },\n\n                unStick: function() {\n                    self.clear();\n                    self.mask('hide');\n                    self.isBound = false;\n                    self.isStick = false;\n                    self.config.onUnStick.call(self.elem);\n                },\n\n                bound: function() {\n                    self.$elem\n                        .css({\n                            position : 'absolute',\n                            top      : '',\n                            bottom   : self.config.bottomOffset\n                        })\n                        .addClass(ClassNames.bound);\n                    self.isBound = true;\n                    self.config.onBound.call(self.elem);\n                },\n\n                unBound: function() {\n                    self.make('fixed');\n                    self.$elem.removeClass(ClassNames.bound);\n                    self.isBound = false;\n                    self.config.onUnBound.call(self.elem);\n                }\n            }[state].apply(self);\n        },\n\n        /**\n         * Perform an action for the mask element.\n         *\n         * @param {string} action\n         */\n        mask: function(action) {\n            var self = this,\n                calc = self.calc,\n                $mask = this.$elem.next(Selectors.mask);\n\n            if ( ! self.config.mask) {\n                return;\n            }\n\n            return {\n                show: function() {\n                    if ($mask.length) {\n                        $mask.css({ // show existing\n                            width  : calc.elemSize.width,\n                            height : calc.elemSize.height\n                        }).show();\n                    } else {\n                        $('<div/>', { // create new\n                            class : ClassNames.mask,\n                            css   : {\n                                width  : calc.elemSize.width,\n                                height : calc.elemSize.height\n                            }\n                        }).insertAfter(self.$elem);\n                    }\n                },\n\n                hide: function() {\n                    $mask.hide();\n                },\n\n                remove: function() {\n                    $mask.remove();\n                }\n            }[action].apply(self);\n        },\n\n        /**\n         * Clear sticky styles and classes.\n         */\n        clear: function() {\n            this.$elem\n                .css({\n                    position  : '',\n                    top       : '',\n                    bottom    : '',\n                    width     : ''\n                })\n                .removeClass(\n                    ClassNames.stick + ' ' +\n                    ClassNames.bound\n                );\n        },\n\n        /**\n         * Observe DOM changes.\n         */\n        observe: function() {\n            if ( ! this.config.observe || ! 'MutationObserver' in window) {\n                return;\n            }\n\n            this.observer = new MutationObserver(this.recalc);\n            this.observer.observe(this.elem, {\n                childList : true,\n                subtree   : true\n            });\n\n            this.contextObserver = new MutationObserver(this.recalc);\n            this.contextObserver.observe(this.$context[0], {\n                childList : true,\n                subtree   : true\n            });\n        },\n\n        /**\n         * Override the instance's settings.\n         *\n         * @param {Object} settings\n         */\n        setting: function(settings) {\n            $.extend(this.config, settings);\n        },\n\n        /**\n         * Destroy the instance.\n         */\n        destroy: function() {\n            if (this.hasOwnProperty('observer')) {\n                this.observer.disconnect();\n                this.contextObserver.disconnect();\n            }\n\n            this.unbind();\n            this.clear();\n            this.mask('remove');\n\n            $.data(this.elem, Name, null); // unset data\n        }\n\n    });\n\n    // Plugin\n\n    $.fn[Name] = function(settings, args) {\n        return this.each(function() {\n            var data = $.data(this, Name);\n\n            if ( ! data) {\n                $.data(this, Name, new Sticky(this, settings));\n            } else if (typeof settings === 'string' && data[settings]) {\n                data[settings].apply(data, Array.isArray(args) ? args : [args]);\n            }\n        });\n    };\n\n    $.fn[Name].defaults = Defaults;\n\n\n})(jQuery, window, document);\n"]}